#Now have finished Q1

pacman::p_load(tidyverse, rebus,IRdisplay,data.table, 
               stringr, lubridate, editrules)
getwd()
setwd("E:/EBAC 2019/Modules/Management of Business Analytics Project/Data Analytics Process and Best Practices/Day2/Day 2 Assignment")

member.data <- read_xlsx("DABP_D2_Assignment_Data.xlsx", sheet = "MemberData")

session.data <- read_xlsx("DABP_D2_Assignment_Data.xlsx", sheet = "SessionData") 

member.data <- read.csv("Member Data.csv",check.names = F)

session.data <- read.csv("Session Data.csv", check.names = F)

head(session.data)
head(member.data,6)


ggplot(member.data,aes(as.factor(Gender),Height))+geom_boxplot()

# 1/4 - 3/4 value for Female is between 150 - 160 
# 1/4 - 3/4 value for Male is between 165 - 177

ggplot(member.data,aes(as.factor(Gender),Weight))+geom_boxplot()
# 1/4 - 3/4 value for Female is between 50 - 70
# 1/4 - 3/4 value for Male is between 60 - 88

# Check for missing value
member.data[member.data$Gender=='',]
# If Height is less than 165, then fill in gender as female
member.data[member.data$Gender=='' & member.data$Height < 165,"Gender"] <- "F"
# If Height is more than 165, then fill in gender as male 
member.data[member.data$Gender == '' & member.data$Height > 165 ,"Gender"] <- "M"

# Use scatter plot to see relation (x = weight and y = height) for maile and female
ggplot()+
  geom_point(data = member.data,aes(x = Weight, y = Height)) + facet_grid(~Gender)
# Use scatter plot to see relation (x = height and y = weight) for maile and female
ggplot()+
  geom_point(data = member.data,aes(x = Height, y = Weight)) + facet_grid(~Gender)

# Fill in missing Height and Weight fot Male 
member.data.male <- member.data[member.data$Gender == 'M',]

# list down all Male missing Height record
member.data[is.na(member.data$Height)&member.data$Gender=='M',]

# Height Missing data number is 5,23,77,120 
member.data[c(5,23,77,120),]
# Find relationship between height and weight 
lm(formula = member.data.male$Height ~ member.data.male$Weight)
# height = 158.6297 + 0.1734*weight 
# Fill in missing height
member.data[is.na(member.data$Height) & member.data$Gender == 'M','Height'] <- round(0.1734*member.data[is.na(member.data$Height) & member.data$Gender == 'M','Weight']+158.6297)
member.data.male[is.na(member.data.male$Height),'Height'] <- round(0.1734*member.data.male[is.na(member.data.male$Height),'Weight']+158.6297)

# Find Male missing Weight
member.data.male[is.na(member.data.male$Weight),]
member.data[is.na(member.data$Weight)&member.data$Gender == 'M',]
# missing data number is 8, 105, 119
member.data[c(8,105,119),]
# Find relationship between weight and height
lm(formula = member.data.male$Weight ~ member.data.male$Height)
# Weight = 0.9063*Height - 81.6834
# Fill in missing weight
member.data[is.na(member.data$Weight) & member.data$Gender == 'M','Weight'] <- round(member.data[is.na(member.data$Weight) & member.data$Gender == 'M','Height']*0.9063 - 81.6834)
member.data.male[is.na(member.data.male$Weight),'Weight'] <- round(member.data.male[is.na(member.data.male$Weight),'Height']*0.9063 - 81.6834)

# Fill in missing height and weight for female 
member.data.female <- member.data[member.data$Gender == 'F',]

# list down all Female missing height record
member.data[is.na(member.data$Height)&member.data$Gender == 'F',]
# Missing record number is 60, 80, 92 and 110 
member.data[c(60,80,92,110),]
# Find relationship between Height and Weight
lm(formula = member.data.female$Height ~ member.data.female$Weight)
# Height = 146.9567 + 0.1381*weight
# Fill in missing height
member.data[is.na(member.data$Height)&member.data$Gender=='F',"Height"] <- round(0.1381*member.data[is.na(member.data$Height) & member.data$Gender == 'F','Weight']+146.9567)
member.data.female[is.na(member.data.female$Height),"Height"] <- round(0.1381*member.data.female[is.na(member.data.female$Height),'Weight']+146.9567)

# list down all Female missing weight record
member.data[is.na(member.data$Weight)&member.data$Gender == 'F',]
# mising record number is 154, 180, 187 and 188
member.data[c(154,180,187,188),]
# Find relationship between Weight and Height
lm(formula = member.data.female$Weight ~ member.data.female$Height)
# Weight = 0.701 * Height - 47.397
# Fill in missing weight
member.data[is.na(member.data$Weight)&member.data$Gender == 'F',"Weight"] <- round(member.data[is.na(member.data$Weight) & member.data$Gender == 'F','Height']*0.701 - 47.397)
member.data.female[is.na(member.data.female$Weight),"Weight"] <- round(member.data.female[is.na(member.data.female$Weight),'Height']*0.701 - 47.397)

write.csv(member.data,"member_data_after_data_clean.csv")


####Fill in session.data

###Fix FitnessChampion
#Reference Table (Location SessionDate SessionTime SessionType FitnessChampion)
ChampionSketch <- session.data[!is.na(session.data$FitnessChampion),-6] %>%  #drop MobilePhone
  arrange(Location, SessionDate, SessionTime, SessionType)
ChampionReference <- unique(ChampionSketch)
#Merge Reference Table with session.data(without FitnessChampion)
session.fixChampion<-merge(ChampionReference, session.data[,-5], by=c("Location", "SessionDate","SessionTime","SessionType"))

###Fix Location
#Reference Table 
LocationSketch <- session.fixChampion[!is.na(session.fixChampion$Location),] %>%  
  arrange(SessionDate, SessionTime, SessionType, FitnessChampion, MemberMobilePhone)
LocationReference <- unique(LocationSketch)
#Merge Reference Table with session.fixChampion
session.fixLocation<-merge(LocationReference, session.fixChampion[,-1], by=c("SessionDate","SessionTime","SessionType","FitnessChampion","MemberMobilePhone"))
session.fixLocation<-session.fixLocation[,c(6,1,2,3,4,5)]

###Fix Time
#Reference Table
TimeSketch <- session.fixLocation[!is.na(session.fixLocation$SessionTime),] %>%
  arrange(Location, SessionDate, SessionType, FitnessChampion, MemberMobilePhone)
TimeReference <- unique(TimeSketch)
#Merge Reference Table with session.fixLocation
session.fixTime<-merge(TimeReference, session.fixLocation[,-3], by=c("Location", "SessionDate","SessionType","FitnessChampion","MemberMobilePhone"))
session.fixTime<-session.fixTime[,c(1,2,6,3,4,5)]

write.csv(session.fixTime, "session_data_after_data_clean.csv")
