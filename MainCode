#Now have finished Q1

pacman::p_load(tidyverse, rebus,IRdisplay,data.table, 
               stringr, lubridate, editrules,openxlsx,readxl,treemap)
getwd()
setwd("E:/EBAC 2019/Modules/Management of Business Analytics Project/Data Analytics Process and Best Practices/Day2/Day 2 Assignment")

member.data <- read_xlsx("DABP_D2_Assignment_Data.xlsx", sheet = "MemberData")

session.data <- read_xlsx("DABP_D2_Assignment_Data.xlsx", sheet = "SessionData") 

head(session.data)
head(member.data,6)


ggplot(member.data,aes(as.factor(Gender),Height))+geom_boxplot()

# 1/4 - 3/4 value for Female is between 150 - 160 
# 1/4 - 3/4 value for Male is between 165 - 177

ggplot(member.data,aes(as.factor(Gender),Weight))+geom_boxplot()
# 1/4 - 3/4 value for Female is between 50 - 70
# 1/4 - 3/4 value for Male is between 60 - 88

# Check for missing value
member.data[is.na(member.data$Gender),]
# If Height is less than 165, then fill in gender as female
member.data[is.na(member.data$Gender) & member.data$Height < 165,"Gender"] <- "F"
# If Height is more than 165, then fill in gender as male 
member.data[is.na(member.data$Gender) & member.data$Height > 165 ,"Gender"] <- "M"

# Use scatter plot to see relation (x = weight and y = height) for maile and female
ggplot()+
  geom_point(data = member.data,aes(x = Weight, y = Height)) + facet_grid(~Gender)
# Use scatter plot to see relation (x = height and y = weight) for maile and female
ggplot()+
  geom_point(data = member.data,aes(x = Height, y = Weight)) + facet_grid(~Gender)

# Fill in missing Height and Weight fot Male 
member.data.male <- member.data[member.data$Gender == 'M',]

# list down all Male missing Height record
member.data[is.na(member.data$Height)&member.data$Gender=='M',]

# Height Missing data number is 5,23,77,120 
member.data[c(5,23,77,120),]
# Find relationship between height and weight 
lm(formula = member.data.male$Height ~ member.data.male$Weight)
# height = 158.6297 + 0.1734*weight 
# Fill in missing height
member.data[is.na(member.data$Height) & member.data$Gender == 'M','Height'] <- round(0.1734*member.data[is.na(member.data$Height) & member.data$Gender == 'M','Weight']+158.6297)
member.data.male[is.na(member.data.male$Height),'Height'] <- round(0.1734*member.data.male[is.na(member.data.male$Height),'Weight']+158.6297)

# Find Male missing Weight
member.data.male[is.na(member.data.male$Weight),]
member.data[is.na(member.data$Weight)&member.data$Gender == 'M',]
# missing data number is 8, 105, 119
member.data[c(8,105,119),]
# Find relationship between weight and height
lm(formula = member.data.male$Weight ~ member.data.male$Height)
# Weight = 0.9063*Height - 81.6834
# Fill in missing weight
member.data[is.na(member.data$Weight) & member.data$Gender == 'M','Weight'] <- round(member.data[is.na(member.data$Weight) & member.data$Gender == 'M','Height']*0.9063 - 81.6834)
member.data.male[is.na(member.data.male$Weight),'Weight'] <- round(member.data.male[is.na(member.data.male$Weight),'Height']*0.9063 - 81.6834)

# Fill in missing height and weight for female 
member.data.female <- member.data[member.data$Gender == 'F',]

# list down all Female missing height record
member.data[is.na(member.data$Height)&member.data$Gender == 'F',]
# Missing record number is 60, 80, 92 and 110 
member.data[c(60,80,92,110),]
# Find relationship between Height and Weight
lm(formula = member.data.female$Height ~ member.data.female$Weight)
# Height = 146.9567 + 0.1381*weight
# Fill in missing height
member.data[is.na(member.data$Height)&member.data$Gender=='F',"Height"] <- round(0.1381*member.data[is.na(member.data$Height) & member.data$Gender == 'F','Weight']+146.9567)
member.data.female[is.na(member.data.female$Height),"Height"] <- round(0.1381*member.data.female[is.na(member.data.female$Height),'Weight']+146.9567)

# list down all Female missing weight record
member.data[is.na(member.data$Weight)&member.data$Gender == 'F',]
# mising record number is 154, 180, 187 and 188
member.data[c(154,180,187,188),]
# Find relationship between Weight and Height
lm(formula = member.data.female$Weight ~ member.data.female$Height)
# Weight = 0.701 * Height - 47.397
# Fill in missing weight
member.data[is.na(member.data$Weight)&member.data$Gender == 'F',"Weight"] <- round(member.data[is.na(member.data$Weight) & member.data$Gender == 'F','Height']*0.701 - 47.397)
member.data.female[is.na(member.data.female$Weight),"Weight"] <- round(member.data.female[is.na(member.data.female$Weight),'Height']*0.701 - 47.397)

write.csv(member.data,"member_data_after_data_clean.csv")

####Fill in session.data

###Fix FitnessChampion
#Reference Table (Location SessionDate SessionTime SessionType FitnessChampion)
ChampionSketch <- session.data[!is.na(session.data$FitnessChampion),-6] %>%  #drop MobilePhone
  arrange(Location, SessionDate, SessionTime, SessionType)
ChampionReference <- unique(ChampionSketch)
#Merge Reference Table with session.data(without FitnessChampion)
session.fixChampion<-merge(ChampionReference, session.data[,-5], by=c("Location", "SessionDate","SessionTime","SessionType"))

###Fix Location
#Reference Table 
LocationSketch <- session.fixChampion[!is.na(session.fixChampion$Location),] %>%  
  arrange(SessionDate, SessionTime, SessionType, FitnessChampion, MemberMobilePhone)
LocationReference <- unique(LocationSketch)
#Merge Reference Table with session.fixChampion
session.fixLocation<-merge(LocationReference, session.fixChampion[,-1], by=c("SessionDate","SessionTime","SessionType","FitnessChampion","MemberMobilePhone"))
session.fixLocation<-session.fixLocation[,c(6,1,2,3,4,5)]

###Fix Time
#Reference Table
TimeSketch <- session.fixLocation[!is.na(session.fixLocation$SessionTime),] %>%
  arrange(Location, SessionDate, SessionType, FitnessChampion, MemberMobilePhone)
TimeReference <- unique(TimeSketch)
#Merge Reference Table with session.fixLocation
session.fixTime<-merge(TimeReference, session.fixLocation[,-3], by=c("Location", "SessionDate","SessionType","FitnessChampion","MemberMobilePhone"))
session.fixTime<-session.fixTime[,c(1,2,6,3,4,5)]

write.csv(session.fixTime, "session_data_after_data_clean.csv")

# Fill in missing Dec point
# Calculate how many point for each yoga and boxing class 
Count.member.class <- session.fixChampion %>%
  group_by(MemberMobilePhone,SessionType) %>%
  summarise(count_level=n())
# Join with session data to get december point 
Count.member.class1 <- merge(x = Count.member.class, y = member.data, by = "MemberMobilePhone", all.x = TRUE)
Count.member.class2 <- Count.member.class1[,c("MemberMobilePhone","SessionType","count_level","FitnessPointsDec18")]
# According to new joined Count.member.class2 table. 
# if less than 5, each yoga class is 5 points. after 5, each is 8 points
# if less than 8, each boxing class is 3 points, after 8, each is 6 points.  

# method to return calcualted point 
CalculatePoint = function(x=1, y=1){
  # x is count of yoga class and y is count of boxing class 
  fit.points <- 0
      if (x<=5)
     {
       fit.points <- fit.points+ 5*x
     }
     else
      {
         fit.points <- fit.points+ 25 + 8*(x-5)
      }
  if (y<=8)
  {
    fit.points <- fit.points + 3*y
  }
  else
  {
    fit.points <- fit.points + 24+ 6*(y-8)
  }
  return(fit.points)
}
# test above method
CalculatePoint(7,3) #expected result should be 50
CalculatePoint(4,5) #expected result should be 35
CalculatePoint(0,10) #expected result should be 36
CalculatePoint(0,9)

Count.member.class.yoga <- Count.member.class2[Count.member.class2$SessionType=="Yoga",]
Count.member.class.boxing <- Count.member.class2[Count.member.class2$SessionType=="KickBoxing",]
colnames(Count.member.class.yoga)[colnames(Count.member.class.yoga)=="count_level"] <- "yoga_count"
colnames(Count.member.class.boxing)[colnames(Count.member.class.boxing)=="count_level"] <- "box_count"

count.member.class.point <- merge(x=Count.member.class.yoga,y=Count.member.class.boxing,by="MemberMobilePhone",all=TRUE)
Count.member.class.new <- count.member.class.point[,c("MemberMobilePhone","yoga_count","box_count","FitnessPointsDec18.x")]
Count.member.class.new[is.na(Count.member.class.new$yoga_count),"yoga_count"] <- 0
Count.member.class.new[is.na(Count.member.class.new$box_count),"box_count"] <- 0
# Calculate fitness point according to rule above
for (row in 1:nrow(Count.member.class.new)){
  point<- Count.member.class.new[row,"FitnessPointsDec18.x"] 
    Count.member.class.new[row,"FitnessPointsDec18.x"]<- CalculatePoint(Count.member.class.new[row,"yoga_count"],Count.member.class.new[row,"box_count"])
}
#join point from this dataset back to member.data 
member.data.1 <- merge(x=member.data,y=Count.member.class.new,by="MemberMobilePhone",all.x = TRUE)
# fill in empty point data with new joined point column
for (row in 1:nrow(member.data.1)) {
  point1<- member.data.1[row,"FitnessPointsDec18"] 
  if(is.na(point1))
  {
    member.data.1[row,"FitnessPointsDec18"]<- member.data.1[row,"FitnessPointsDec18.x"]
  }
}
member.data.final<- member.data.1 


####Q2 Validate data ( MemberMobilePhone & FitnessPointsDec18 )
###Validate MemberMobilePhone in member.data
member.data <- read_xlsx("DABP_D2_Assignment_Data.xlsx", sheet = "MemberData")
head(member.data[,2],10)
#The format of Singapore Phone: First number should be 8 or 9; Length should be 8 digits
#Grep values that do not match
MemberMobilePhoneNotMatch <- grep("^([8|9])\\d{7}$",as.character(member.data$MemberMobilePhone),value = T, invert = T)
MemberMobilePhoneNotMatch

###Validate FitnessPointsDec18 in member.data
#Compare origin FitnessPointsDec18 in member.data with new FitnessPointsDec18.x we calcualted
member.data.fixFitnessPointsDec18 <- merge(x=member.data,y=Count.member.class.new,by="MemberMobilePhone",all.x = TRUE)
head(member.data.fixFitnessPointsDec18[!is.na(member.data.fixFitnessPointsDec18$FitnessPointsDec18),],20)
filter(member.data.fixFitnessPointsDec18[!is.na(member.data.fixFitnessPointsDec18$FitnessPointsDec18),],FitnessPointsDec18 != FitnessPointsDec18.x)


# Q3
# Add new BMI column 
member.data.final$BMI <- round(member.data$Weight/((member.data$Height/100)^2),1)
# Add new column HealthCondition
#BMI <= 18.4 lean
#18.5 - 23.9 fit
#24 - 27.9 Overweight
#>28 fat
member.data.final$HealthCondition[member.data.final$BMI<=18.4] <- "lean"
member.data.final$HealthCondition[member.data.final$BMI>18.4 & member.data.final$BMI<=23.9] <- "fit"
member.data.final$HealthCondition[member.data.final$BMI>23.9 & member.data.final$BMI<=27.9] <- "over weight"
member.data.final$HealthCondition[member.data.final$BMI>27.9] <- "fat"

# Add a new variable to indicate if user is active or not 
boxplot(member.data$FitnessPointsDec18)
# Divided member to 3 group,  active, normal, inactive
# Dec point<20 inactive, 20<X<60, normal, >60 active
member.data.final$status[member.data.final$FitnessPointsDec18<=20] <- "inactive"
member.data.final$status[member.data.final$FitnessPointsDec18>20 & member.data.final$FitnessPointsDec18<=60] <- "normal"
member.data.final$status[member.data.final$FitnessPointsDec18>60] <- "active"

#Q4
# Count the number and precentage of different status member 
member.data.final %>%
  group_by(status) %>%
  summarise(count=n(),
            percentage = n()/nrow(member.data.final)) %>%
  ggplot(aes(x = as.factor(status),y=count))+geom_bar(stat = 'identity')

# Analyze active and inactive member profile 
member.data.final %>%
  group_by(HealthCondition,status)%>%
  summarise(count_level=n(),
            percentage = n()/nrow(member.data.final)) %>%
  ggplot(aes(x = as.factor(HealthCondition),y=percentage,fill=as.factor(status)))+geom_bar(stat = 'identity')

member.data.final %>%
  group_by(Gender,status)%>%
  summarise(count_level=n(),
            percentage = n()/nrow(member.data.final)) %>%
  ggplot(aes(x = as.factor(Gender),y=percentage,fill=as.factor(status)))+geom_bar(stat = 'identity')

# Analyze different profile preference on yoga and boxing. 
member.data.final %>%
  group_by(Gender,HealthCondition) %>%
  summarise(count_level = sum(yoga_count)) %>%
  ggplot(aes(x = as.factor(Gender),y = count_level,fill=as.factor(HealthCondition)))+geom_bar(stat = 'identity')

member.data.final %>%
  group_by(Gender,HealthCondition) %>%
  summarise(count_level = sum(box_count)) %>%
  ggplot(aes(x = as.factor(Gender),y = count_level,fill=as.factor(HealthCondition)))+geom_bar(stat = 'identity')

#Compare Avg Score members get per day before/after Nov
member.data.getAvg <- mutate(member.data.final, AvgScoreBeforeNov = round(member.data.final$FitnessPointsUpToNov18 / as.numeric(difftime(as.Date('2018-11-30'), as.Date(member.data.final$MemberSince), units = "days"), units = "days"),2))
member.data.getAvg <- mutate(member.data.getAvg, AvgScoreDec = round(member.data.getAvg$FitnessPointsDec18 / 31,2))
member.data.getAvg$Trend[round(member.data.getAvg$AvgScoreDec, 1) == round(member.data.getAvg$AvgScoreBeforeNov, 1)] <- "remain"
member.data.getAvg$Trend[round(member.data.getAvg$AvgScoreDec, 1) > round(member.data.getAvg$AvgScoreBeforeNov, 1)] <- "increase"
member.data.getAvg$Trend[round(member.data.getAvg$AvgScoreDec, 1) < round(member.data.getAvg$AvgScoreBeforeNov, 1)] <- "decrease"

member.data.getAvg <- mutate(member.data.getAvg, AttendanceDifference = member.data.getAvg$AvgScoreDec - member.data.getAvg$AvgScoreBeforeNov)

#Analyze the trend of membership participation in Dec comparing with before.
#Treemap
TrendSummary = member.data.getAvg %>% group_by(Trend) %>% summarise(count=n())
treemap(TrendSummary, index=c("Trend"),vSize="count", type="index")


#Analyze trends of participation in different status of members
#Bar chart
member.data.ready <- member.data.getAvg[,c("status","AvgScoreBeforeNov","AvgScoreDec")]
member.data.ready <- aggregate(x = member.data.ready[, 2:3], by =list(member.data.ready$status), FUN = mean)

member.data.ready <- melt(member.data.ready[,c("Group.1","AvgScoreBeforeNov","AvgScoreDec")], id.vars="Group.1", variable.name = "Time", value.name = "AvgScore")
ggplot(member.data.ready,aes(Group.1,AvgScore,fill=Time))+
  geom_bar(stat="identity",position="dodge")

#Scatter plot
member.data.getAvg %>%  
  ggplot(aes(x = AttendanceDifference, y = FitnessPointsDec18, colour = status)) +
  geom_point()
